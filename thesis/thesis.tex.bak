\documentclass[titlepage]{article}

\usepackage{textcomp}
\usepackage{xspace}
\usepackage{url}
\usepackage{multirow}
\usepackage{hhline}
\usepackage{pifont}
\usepackage{amsmath, amsfonts , amsthm , mathtools , bbold , float}
\usepackage{tikz}
\usetikzlibrary{arrows,matrix,decorations.pathmorphing,
  decorations.markings, calc, backgrounds}
\usepackage{mathpartir}
\usepackage{microtype}
\usepackage{hyperref}
\usepackage{url}
\usepackage{lscape}
\DisableLigatures[-]{family=tt*}
\usepackage{enumitem}
\usepackage[titletoc]{appendix}

\newcommand\myeq{\mathrel{\overset{\makebox[0pt]{\mbox{\normalfont\tiny\sffamily def}}}{=}}}

\newtheorem{theorem}{Theorem}[section]
\newtheorem{definition}{Definition}[section]
\newtheorem{lemma}{Lemma}[section]
\newtheorem{proposition}{Proposition}
\newtheorem{agdadef}{Agda definition}

\input{macros}

\bibliographystyle{plainurl}


\begin{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%            Abstract            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{abstract}
    This thesis focuses on formalizing the Lindenbaum-Tarski algebra in Cubical Agda, an area of mathematical logic that involves the quotienting of the algebra of formulas by an equivalence relation defined in terms of provability. To achieve this goal, we first formalize classical propositional logic and its properties in Agda, and define the equivalence relation on formulas. We then proceed to define the Lindenbaum-Tarski algebra in Cubical Agda and prove its soundness and properties. In particular, we show that the algebra is a complemented distributive lattice, which implies that it is boolean.
\end{abstract}

\tableofcontents
\thispagestyle{empty}
\newpage
\setcounter{page}{1}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%          Introduction          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Introduction}

\Agda is a powerful dependently typed programming language that is based on Martin Löf's type theory. Its strong typing and dependent types make it an ideal proof assistant for formalizing mathematical proofs.\cite{AgdaDoc} Formalizing mathematics in Agda provides several benefits, such as creating machine-checkable proofs that ensure the correctness of a proof and detecting errors or gaps in reasoning that may not be apparent through traditional mathematical proofs. This deepens our understanding and verification of mathematical concepts and proofs. In Section 2, we will provide a brief introduction to \Agda and types.

The Lindenbaum-Tarski algebra is an area of mathematical logic that involves factoring the algebra of formulas by an equivalence relation defined in terms of provability.\cite{wikipedia} The Lindenbaum-Tarski algebra of a context $\Gamma$ consists of the equivalence classes of formulas in $\Gamma$. In this thesis, we aim to formalize the Lindenbaum-Tarski algebra in \CubicalAgda, which is a variant of \Agda that is extended with cubical type theory.

The first step towards our goal is to formalize classical propositional logic and its properties in \Agda, defining the equivalence relation on formulas such that two formulas are equivalent if and only if they are provably equivalent in the context. This will be the focus of Section 3.

In Section 4, we will move on to define the Lindenbaum-Tarski algebra in Cubical Agda, proving soundness and some properties of the algebra. Our primary goal will be to formalize that the algebra is a boolean algebra. We will use the fact that a boolean algebra can be viewed as a complemented distributive lattice to formalize that the Lindenbaum-Tarski algebra is boolean.

This formalization will provide the \agdaCubical library with a formalisation of Lindenbaum-Tarski algebra, that is currently missing, and allow for the verification of mathematical proofs related to Lindenbaum-Tarski algebra in the future.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    The Agda proof assistant    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Agda proof assistant}

Agda is a powerful dependently typed programming language that is based on Martin Löf's type theory. It allows us to encode mathematical propositions as types and their proofs as programs, ensuring the correctness and consistency of our reasoning. The language's strong type system also provides powerful tools for automatically verifying the correctness of proofs.\cite{BoveDybjer2008}

Furthermore, Agda is a total language, which means that any program e of type T will always terminate with a value in T. This guarantees the absence of runtime errors and prevents the creation of nonterminating programs, unless explicitly requested by the programmer.\cite{AgdaDoc}


\subsection{Propositions as types}

Propositions as types is a concept that links logical propositions with types in a programming language. It is based on the idea that a proof of a proposition is analogous to a program that satisfies the type associated with the proposition.

In this context, the introduction and elimination rules for logical connectives can be viewed as operations that construct and deconstruct values of the corresponding types. For instance, the introduction rule for conjunction states that given proofs of two propositions, we can construct a proof of their conjunction by pairing the two proofs together. This can be seen as a function that takes two values of the corresponding types and returns a pair value.

Conversely, the elimination rule for conjunction says that given a proof of a conjunction, we can extract proofs of its two conjuncts by projecting the pair onto each component. This can be viewed as a function that takes a pair value and returns two values of the corresponding types.

This is similar to the concept of product types in programming languages, where a product type represents a pair of values. The introduction form of a product type is a pair, and the elimination forms are projection functions that extract the individual components of the tuple. Table 1 summarizes the correspondence between propositions and types and between proofs and programs.

\begin{table}[h!]
    \centering
    \begin{tabular}{c | c}
        Prop & Type \\
        \hline
        $\top$ & unit \\
        $\bot$ & void \\
        $\phi_1 \wedge \phi_2$ & $\tau_1 \times \tau_2$ \\
        $\phi_1 \supset \phi_2$ & $\tau_1 \to \tau_2$ \\
        $\phi_1 \vee \phi_2$ & $\tau_1 + \tau_2$
    \end{tabular}
    \caption{Propositions as types}
\end{table}

This allows us to reason about logical propositions in terms of programming language types, and to use the tools and techniques of programming languages like \Agda to reason about logical proofs.


\subsection{Simply typed functions and datatypes}

A data declaration introduces a new datatype with its name, type, and constructors, along with their types. For instance, the boolean type can be defined as follows:

\ExecuteMetaData[agda/latex/examples.tex]{bool}
Here, \texttt{Bool} is the name of the datatype, and \texttt{true} and \texttt{false} are its constructors. Functions over the datatype \texttt{Bool} can be defined using pattern matching, similar to \Haskell. For example, the \texttt{not} function can be defined as follows:

\ExecuteMetaData[agda/latex/examples.tex]{not}
We start by defining the type of \texttt{not} as a function from \texttt{Bool} to \texttt{Bool} and then we define the function by pattern matching on the arguments. \Agda ensures that the pattern covers all cases and will not accept a function with missing patterns.

The natural numbers can be defined as an inductively defined type, as follows:

\ExecuteMetaData[agda/latex/examples.tex]{nat}
Here, \texttt{zero} represents the natural number $0$, and \texttt{suc} $n$ represents the successor of the natural number $n$. We can define addition on natural numbers using a recursive function, as follows:

\ExecuteMetaData[agda/latex/examples.tex]{add}

If a name contains underscores ('\_') in the definition, they represent where the arguments go. So in this case we get an infix operator, and we write 'm + n' instead of '+ m n', which would have been the case if the name was just '+'. We can set the precedence of an infix operator with an \texttt{infix} declaration:

\ExecuteMetaData[agda/latex/examples.tex]{infix}

Datatypes can also be parameterized by other types. For instance, the type of lists with elements of an arbitrary type is defined as follows:

\ExecuteMetaData[agda/latex/examples.tex]{list}
This declares the datatype \texttt{List} as a function of a type $A$ that maps to the type \texttt{List} $A$. It has two constructors, '[ ]' for an empty list and '::' for a list that has an element of type $A$ followed by a list of type \texttt{List} $A$. The underscore before '::' is a placeholder for the first argument of the constructor (an element of type $A$), and the underscore after '::' is a placeholder for the second argument of the constructor (a list of type \texttt{List} $A$).


\subsection{Dependent types}

A dependent type is a type that depends on elements of another type. An example of a dependent type is a dependent function, where the result type depends on the value of the argument.  In Agda, this is denoted by (x : A) $\to$ B, representing functions that take an argument x of type A and produce a result of type B. A special case is when x itself is a type. For instance, we can define the identity function

\ExecuteMetaData[agda/latex/examples.tex]{id1}
This function takes a type argument A and an element x of type A, and returns x. In \Agda it is possible to use implicit arguments. To declare an argument as implicit we use curly braces instead of parenthesis when declaring the type argument. In particular, \{A : Set\} $\to$ B means the same thing as (A : Set) $\to$ B, but we don't need to provide the type explicitly, the type checker will try to infer it for us. We can now redefine the identity function above as follows:

\ExecuteMetaData[agda/latex/examples.tex]{id2}
Note that we no longer need to supply the type when the function is applied.


\subsection{Cubical Agda}

In this project, we will be working with quotient types, which requires us to use Cubical Agda. Cubical Agda is an extension of Agda that incorporates features from Cubical Type Theory, which is necessary for dealing with set quotients.\cite{AgdaDoc} However, it is important to note that we will only be using a small portion of the \agdaCubical library, and any cubical theory is beyond the scope of this thesis.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Propositional calculus in Agda %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Propositional calculus in Agda}



Propositional calculus is a formal system that consists of a set of propositional constants, symbols, inference rules, and axioms. The symbols in propositional calculus represent logical connectives and parentheses, and are used to construct well-formed formulas that follow the syntax of the system. The inference rules specify how these symbols can be used to derive additional statements from the initial assumptions, which are given by the axioms of the system. 

The reader is expected to be somewhat familiar with propositional calculus and natural deduction, if not they can refer to \cite{carlstrom} or \cite{vanDalen} which are the basis for most of the definitions and rules used in this section.


%% Formulas %%

\subsection{Formulas}

In order to represent propositional calculus in \Agda we first need to define the type for well-formed formulas and the language in which we express them.

\begin{definition}[Language]\label{language}
    The language $\mathcal{L}$ of propositional calculus consists of
    \begin{itemize}
        \item proposition symbols: $p_0,p_1,\hdots,p_n$,
        \item logical connectives: $\wedge,\vee,\neg,\top,\bot$,
        \item auxiliary symbols: (, ).
    \end{itemize}
\end{definition}
Note that we have omitted the common logical connectives $\rightarrow$ and $\leftrightarrow$. This is becuase we can define them using other connectives, 
\begin{align*}
    \phi \rightarrow \psi &\myeq \neg \phi \vee \psi, \\
    \phi \leftrightarrow \psi &\myeq (\neg \phi \vee \psi) \wedge (\neg \psi \vee \phi),
\end{align*}making them reduntant. It is possible to choose an even smaller set of connectives \cite{vanDalen}, but we choose this set as it is convenient.

\begin{definition}[Well formed formula]\label{wellformed}
    The set of well formed formulas is inductively defined as follows:
    \begin{itemize}
        \item any propositional constant $p_0,p_1,\hdots,p_n$ is a well formed formula,
        \item $\top$ and $\bot$ are well formed formulas,
        \item if $p$ is a well formed formula, then so is
        $$\neg p,$$
        \item if $p_i$ and $p_j$ are well formed formulas, then so are
            $$p_i \wedge p_j \quad \text{and} \quad p_i \vee p_j.$$
    \end{itemize}
    The formula $\top$ should be thought of as the proposition that is always true, and the formula $\bot$ interpreted as the proposition that is always false.
\end{definition}

Now we are ready to define the type for well-formed formulas in \Agda using the definition above.
\begin{agdadef}[Formula]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{form}
\end{agdadef}




%% Context %%

\subsection{Context}
\begin{definition}[Context]
    A context is a set of sentences in the language $\mathcal{L}$. The set is defined inductively as follows:
    \begin{itemize}
        \item the empty set is a context
        \item if $\Gamma$ is a context, then $\Gamma \cup \{\phi\}$ is also a context, where $\phi$ a formula.
    \end{itemize}
\end{definition}
We will sometimes write $\Gamma, \phi$ instead of $\Gamma \cup \{\phi\}$, but they should both be thought of as the latter. In \Agda we will interpret $\Gamma \cup \{\phi\}$ as $\Gamma : \phi$. Lets define the data type for context in \Agda.

\begin{agdadef}[Context]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{ctxt}
\end{agdadef}
We also need a way to determine if a given formula is in a given context. 
\begin{definition}\label{lookup}
    For all contexts $\Gamma$ and all formulas $\phi$ and $\psi$
    \begin{itemize}
        \item $\phi \in \Gamma \cup \{\phi\}$,
        \item if $\phi \in \Gamma$, then $\phi \in \Gamma \cup \{\psi\}$.
    \end{itemize}
\end{definition}

\begin{agdadef}[Lookup]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{lookup}
\end{agdadef}


%% Inference rules %%

\subsection{Inference rules}

Inference rules are used to derive new propositions from existing ones. In order to formalize the process of proving propositions in our system, we introduce a new data type for provability. This data type has as its inhabitants all of the possible inference rules that can be used to prove a given proposition.

\begin{agdadef} $ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{provability}
    \hspace{40mm}$\vdots$
\end{agdadef}



\subsubsection{Law of excluded middle}

\begin{definition}
    The law of excluded middle states that for every proposition, either the proposition or its negation is true.
\end{definition}
This principle is equivalent to the statement that $\phi \vee \neg \phi$ is a tautology, where $\phi$ is any proposition. Given the above definition, we can introduce an inference rule for LEM. This rule requires no premise, as LEM is a tautology.
\begin{mathpar}
    \inferrule*[right=\scriptsize LEM]
        { }{\Gamma \vdash \phi \vee \neg \phi}
\end{mathpar}

\begin{agdadef}[Law of excluded middle]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LEM}
\end{agdadef}

By using the LEM inference rule in our system, we can derive new propositions and prove theorems based on the principle of excluded middle.


\subsubsection{Logical connectives}

Rules for the logical connectives come in pairs of introduction and elimination rules, apart from $\top$, which has only an introduction rule, and $\bot$, which has only an elimination rule. These rules are based on \cite{vanDalen}.

The introduction rule for conjunction states that if there is a derivation of $\phi$ from $\Gamma$, and a derivation of $\psi$ from $\Gamma$, then we can conclude that there is a derivation of $\phi \wedge \psi$ from $\Gamma$.
\begin{mathpar}
    \inferrule*[Right=\scriptsize $\wedge$-I]
        {\Gamma \vdash \phi \\ \Gamma \vdash \psi }
        {\Gamma \vdash \phi \wedge \psi}
\end{mathpar}

\begin{agdadef}[Conjunction introduction]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{conjI}
\end{agdadef}


The corresponding elimination rules says that if there is some derivation concluding in $\phi \wedge \psi$ from $\Gamma$, then we can conclude that there is a derivation of $\phi$, and a derivation of $\psi$, from $\Gamma$.

\begin{mathpar}
    \inferrule*[right=\scriptsize $\wedge$-E$_1$]
        {\Gamma \vdash \phi \wedge \psi}
        {\Gamma \vdash \phi}
    \hspace{10mm}
    \inferrule*[right=\scriptsize $\wedge$-E$_2$]
        {\Gamma \vdash \phi \wedge \psi}
        {\Gamma \vdash \psi}
\end{mathpar}

\begin{agdadef}[Conjunction elimination]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{conjE1}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{conjE2}
\end{agdadef}

For disjunction, we have two introduction rules. If we can derive a formula $\phi$ from $\Gamma$, then we can also derive $\phi \vee \psi$ from $\Gamma$. Similarly, if we can derive $\psi$ from $\Gamma$, then we can also derive $\phi \vee \psi$ from $\Gamma$.
\begin{mathpar}
    \inferrule*[right=\scriptsize $\vee$-I$_1$]
        {\Gamma \vdash \psi}
        {\Gamma \vdash \phi \vee \psi}
    \hspace{10mm}
    \inferrule*[right=\scriptsize $\vee$-I$_2$]
        {\Gamma \vdash \phi}
        {\Gamma \vdash \phi \vee \psi}
\end{mathpar}

\begin{agdadef}[Disjunction introduction]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{disjI1}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{disjI2}
\end{agdadef}



The eliminination rule for disjunction is a bit more involved. If $\phi \vee \psi$ can be deduced from $\Gamma$, then we can conclude $\Gamma \vdash \gamma$ if the extended contexts $\Gamma, \phi$ and $\Gamma, \psi$ both conclude in $\gamma$.
\begin{mathpar}
    \inferrule*[right=\scriptsize $\vee$-E]
        {\Gamma \vdash \phi \vee \psi \\ 
         \Gamma , \phi \vdash \gamma\\
         \Gamma , \psi \vdash \gamma}
        {\Gamma \vdash \gamma}
\end{mathpar}

\begin{agdadef}[Disjunction elimination]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{disjE}
\end{agdadef}



\begin{definition}
    A context $\Gamma$ is inconsistent if $\Gamma \vdash \phi$ and $\Gamma \vdash \neg \phi$, or equivalently $\Gamma \vdash \bot$. A context that is not inconsistent, is called consistent.
\end{definition}
The definition of inconsistency and the law of excluded middle together motivates the introduction and elimination rules for negation.
\begin{mathpar}
    \inferrule*[right=\scriptsize $\neg$-I]
        {\Gamma, \phi \vdash \bot}
        {\Gamma \vdash \neg \phi}
    \hspace{10mm}
    \inferrule*[right=\scriptsize $\neg$-E]
        {\Gamma \vdash \phi \\ \Gamma \vdash \neg \phi}
        {\Gamma \vdash \bot}
\end{mathpar}

\begin{agdadef}[Negation introduction]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{negI}
\end{agdadef}

\begin{agdadef}[Negation elimination]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{negE}
\end{agdadef}


In Definition \ref{wellformed} we mentioned that $\top$ should be thought of as the proposition that is always true. In particular, it is a tautology and as such trivially true in all contexts, and should be introduced with no premise.
\begin{mathpar}
    \inferrule*[right=\scriptsize $\top$ I]
        { }{\Gamma \vdash \top}
\end{mathpar}

\begin{agdadef}[$\top$ introduction]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{topI}
\end{agdadef}

If a context is inconsistent one can derive anything from it, which leads to the elimination rule for $\bot$.
\begin{mathpar}
    \inferrule*[right=\scriptsize $\bot$-E]
        {\Gamma \vdash \bot}
        {\Gamma \vdash \phi}
\end{mathpar}

\begin{agdadef}[$\bot$ elimination]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{botE}
\end{agdadef}



\subsubsection{Structural rules}

Weakening is a structural rule that states that we can extend the hypothesis with additional members.
\begin{mathpar}
    \inferrule*[right=\scriptsize weakening]
        {\Gamma \vdash \phi}
        {\Gamma , \psi \vdash \phi}
\end{mathpar}

\begin{agdadef}[Weakening]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{weakening}
\end{agdadef}



The structural rule of exchange allows us to permute the formulas in the context. However, we will be using a stricter version of exchange, where we can only permute the two formulas at the end of the context. This version is easier to implement and still satisfies our needs.
\begin{mathpar}
    \inferrule*[right=\scriptsize exchange]
        {\Gamma , \phi , \psi \vdash \gamma}
        {\Gamma , \psi , \phi \vdash \gamma}
\end{mathpar}

\begin{agdadef}[Exchange]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{exchange}
\end{agdadef}



%% Properties of propositional calc %%

\subsection{Properties of a propositional calculus}

In this section we aim to prove some properties of propositional calculus as they will be important later.

\subsubsection{Equivalence relation}

\begin{definition}\label{eq-def}
    Let $S$ be the set of all the sentences of $\mathcal{L}$. Define the relation $\sim$ such that for $\phi,\psi \in S$,
    $$\phi \sim \psi \qquad \text{iff} \qquad \Gamma, \phi \vdash \psi \text{ and } \Gamma , \psi \vdash \phi$$
\end{definition}
Because the definition of the relation is a pair it is natural to defin it in \Agda as a product type.

\begin{agdadef}[Equivalence relation]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{eq}
\end{agdadef}


Before we prove that this is an equivalence relation we will prove a useful lemma.
\begin{lemma}\label{trans-lemma}
    Given $\Gamma, \phi \vdash \psi$ and $\Gamma, \psi \vdash \gamma$, it follows that $\Gamma, \phi \vdash \gamma$
\end{lemma}
\begin{proof}
    This is done through natural deduction using the deduction rules defined previously.
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-E]
            {\inferrule*[right=\scriptsize $\vee$-i$_2$]
                {\Gamma, \phi \vdash \psi}
                {\Gamma, \phi \vdash \psi \vee \gamma} \\
             \inferrule*[right=\scriptsize exchange]
                {\inferrule*[right=\scriptsize weakening]
                    {\Gamma, \psi \vdash \gamma}
                    {\Gamma, \psi, \phi \vdash \gamma}}
                {\Gamma, \phi, \psi \vdash \gamma} \\
             \inferrule*[right=\scriptsize axiom]
                {\gamma \in \Gamma , \phi, \gamma}
                {\Gamma , \phi, \gamma \vdash \gamma}}
            {\Gamma, \phi \vdash \gamma}
    \end{mathpar}
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{trans-lemma}
\end{proof}

\begin{theorem}\label{eq}
    The relation $\sim$ is an equivalence relation.
\end{theorem}

\begin{proof}
    It follows immediately from the axiom rule,
    \begin{mathpar}
        \inferrule*[right=\scriptsize axiom]
            {\phi \in \Gamma, \phi}
            {\Gamma ,\phi \vdash \phi}
    \end{mathpar}
    that $\varphi \sim \varphi$, so the relation is reflexive.

    It should be clear that $\Gamma, \phi \vdash \psi \text{ and } \Gamma , \psi \vdash \phi$ is just a pair of proofs, hence it does not matter in which order we give them. This means that the relation is also symmetric.

    In order to prove transitivity we need to show that, given $\phi \sim \gamma$ and $\gamma \sim \psi$, it holds that $\phi \sim \psi$. By definition \ref{eq-def} we have the following:
    \begin{enumerate}[label=(\roman*)]
        \item $\Gamma, \phi \vdash \gamma$,
        \item $\Gamma, \gamma \vdash \phi$,
        \item $\Gamma, \gamma \vdash \psi$,
        \item $\Gamma, \psi \vdash \gamma$.
    \end{enumerate}
    Now we can apply Lemma \ref{trans-lemma} on (i) and (iii) to conclude $\Gamma, \phi \vdash \psi$, and again to (iv) and (ii) to conclude $\Gamma, \psi \vdash \phi$. Thus we have shown that $\varphi \sim \psi$.
    
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{refl}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{sym}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{trans}
\end{proof}


\subsubsection{Commutativity}

\begin{proposition}\label{conj-comm}
    Conjunction is commutative, that is $\phi \wedge \psi \sim \psi \wedge \phi$.
\end{proposition}

\begin{proof} We need to show $\Gamma, \phi \wedge \psi \vdash \psi \wedge \phi$ and $\Gamma, \psi \wedge \phi \vdash \phi \wedge \psi$. To show $\Gamma, \phi \wedge \psi \vdash \psi \wedge \phi$, we have:
\begin{mathpar}
    \inferrule*[right=\scriptsize $\wedge$-I]
        {\inferrule*[right=\scriptsize $\wedge$-E$_2$]
            {\inferrule*[right= \scriptsize axiom]
                {\phi \wedge \psi \in \Gamma, \phi \wedge \psi}
                {\Gamma,\phi \wedge \psi \vdash \phi \wedge \psi}}
            {\Gamma,\phi \wedge \psi \vdash \psi} \\
        \inferrule*[right=\scriptsize $\wedge$-E$_1$]
            {\inferrule*[right= \scriptsize axiom]
                {\phi \wedge \psi \in \Gamma, \phi \wedge \psi}
                {\Gamma,\phi \wedge \psi \vdash \phi \wedge \psi}}
            {\Gamma,\phi \wedge \psi \vdash \phi}}
        {\Gamma \vdash \psi \wedge \phi}
\end{mathpar}

The proof of the second part is identical up to renaming of the formulas, so we omit it. Together they prove the equivalence $\phi \wedge \psi \sim \psi \wedge \phi$. 
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{conj-comm}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{comm-eq-conj}
\end{proof}

\begin{proposition}\label{disj-comm}
    Disjunction is commutative, that is $\phi \vee \psi \sim \psi \vee \phi$.
\end{proposition}

\begin{proof}
    We need to show $\Gamma, \phi \vee \psi \vdash \psi \vee \phi$ and $\Gamma, \psi \vee \phi \vdash \phi \vee \psi$. Up to renaming of the formulas, the proofs are identical, so it suffices to show $\Gamma, \phi \vee \psi \vdash \psi \vee \phi$. Let $\Gamma' = \Gamma \cup \{\phi \vee \psi\}$, then by natural deduction we can show $\Gamma' \vdash \psi \vee \phi$.
    \begin{mathpar}
        \mprset{sep=0.5em}
        \inferrule*[right=\scriptsize $\vee$-E]
            {\inferrule*[right=\scriptsize axiom]
                {\phi \vee \psi \in \Gamma'}
                {\Gamma' \vdash \phi \vee \psi} \\ 
             \inferrule*[right=\scriptsize$\vee$-I$_1$]
                {\inferrule*[right=\scriptsize axiom]
                    {\phi \in \Gamma', \phi}
                    {\Gamma', \phi \vdash \phi}}
                {\Gamma',\phi \vdash \psi \vee \phi} \\
             \inferrule*[right=\scriptsize$\vee$-I$_2$]
                {\inferrule*[right=\scriptsize axiom]
                    {\psi \in \Gamma',\psi}
                    {\Gamma', \psi \vdash \psi}}
                {\Gamma',\psi \vdash \psi \vee \phi}}
            {\Gamma' \vdash \psi \vee \phi}
    \end{mathpar}
    Thus we have shown $\Gamma, \phi \vee \psi \vdash \psi \vee \phi$ and $\Gamma, \psi \vee \phi \vdash \phi \vee \psi$, so we have the equivalence $\phi \vee \psi \sim \psi \vee \phi$. 

\end{proof}
\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{disj-comm}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{comm-eq-disj}
\end{proof}


\subsubsection{Associativity}

\begin{proposition}
    Conjunction is associative, $\phi \wedge (\psi \wedge \gamma) \sim (\phi \wedge \psi) \wedge \gamma$.
\end{proposition}

\begin{proof}
    We need to show $\Gamma, \phi \wedge (\psi \wedge \gamma) \vdash (\phi \wedge \psi) \wedge \gamma$ and $\Gamma, (\phi \wedge \psi) \wedge \gamma \vdash \phi \wedge (\psi \wedge \gamma)$. Using natural deduction, we can prove both statements. Since the two proofs are very similar, we will only present the first one. 

    Let $\Gamma' = \Gamma \cup \{\phi \wedge (\psi \wedge \gamma)\}$. Then we can make a deduction $\mathcal{D}_1$ concluding in $\Gamma' \vdash \varphi \wedge \psi$,

    \begin{mathpar}
        \inferrule*[right=\scriptsize $\wedge$-I]
            {\inferrule*[right=\scriptsize $\wedge$-E$_1$]
                {\inferrule*[right=\scriptsize $\wedge$-E$_2$]
                   {\inferrule*[right=\scriptsize axiom]
                        {\phi \wedge (\psi \wedge \gamma) \in \Gamma'}
                        {\Gamma' \vdash \phi \wedge (\psi \wedge \gamma)}}
                    {\Gamma' \vdash \psi \wedge \gamma}}
                {\Gamma' \vdash \psi} \\
             \inferrule*[right=\scriptsize $\wedge$-E$_1$]
                {\inferrule*[right=\scriptsize axiom]
                    {\phi \wedge (\psi \wedge \gamma) \in \Gamma'}
                    {\Gamma' \vdash \phi \wedge (\psi \wedge \gamma)}}
                {\Gamma' \vdash \phi}}
            {\Gamma' \vdash \phi \wedge \psi}
    \end{mathpar}
and another deduction $\mathcal{D}_2$ concluding in $\Gamma' \vdash \gamma$,
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\wedge$-E$_2$]
                {\inferrule*[right=\scriptsize $\wedge$-E$_2$]
                    {\inferrule*[right=\scriptsize axiom]
                        {\phi \wedge (\psi \wedge \gamma) \in \Gamma'}
                        {\Gamma' \vdash \phi \wedge (\psi \wedge \gamma)}}
                    {\Gamma' \vdash \psi \wedge \gamma}}
                {\Gamma' \vdash \gamma}
    \end{mathpar}
Now, with the derivations $\mathcal{D}_1$ and $\mathcal{D}_2$ we can, using conjunction introduction, conclude that $\Gamma' \vdash (\phi \wedge \psi) \wedge \gamma$,
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\wedge$-I]
            {\mathcal{D}_1 \\ \mathcal{D}_2}
            {\Gamma' \vdash (\phi \wedge \psi) \wedge \gamma}
    \end{mathpar}
Thus we have shown that $\Gamma, \phi \wedge (\psi \wedge \gamma) \vdash (\phi \wedge \psi) \wedge \gamma$. Together with the omitted proof we get the equivalence $\phi \wedge (\psi \wedge \gamma) \sim (\phi \wedge \psi) \wedge \gamma$.
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{conj-ass1}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{conj-ass2}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{ass-eq-conj}
\end{proof}

\begin{proposition}
    Disjunction is associative, $\phi \vee (\psi \vee \gamma) \sim (\phi \vee \psi) \vee \gamma$.
\end{proposition}

\begin{proof}
    We need to show $\Gamma, \phi \vee (\psi \vee \gamma) \vdash (\phi \vee \psi) \vee \gamma$ and $\Gamma, (\phi \vee \psi) \vee \gamma \vdash \phi \vee (\psi \vee \gamma)$. Proof is done through natural deduction. Let $\Gamma' = \Gamma \cup \{\phi \vee (\psi \vee \gamma)\}$,
    
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-E]
            {\inferrule*[right=\scriptsize axiom]
                {\phi \vee (\psi \vee \gamma) \in \Gamma'}
                {\Gamma' \vdash \phi \vee (\psi \vee \gamma)} \\
            \mathcal{D}_1 \\
            \mathcal{D}_2}
            {\Gamma' \vdash (\phi \vee \psi) \vee \gamma}
    \end{mathpar}
    Here we need $\mathcal{D}_1$ to be a deduction of $\Gamma', \phi \vdash (\phi \vee \psi) \vee \gamma$ and and $\mathcal{D}_2$ a deduction of $\Gamma', \psi \vee \gamma\vdash (\phi \vee \psi) \vee \gamma$. We can construct $\mathcal{D}_1$ as follows:
    \begin{mathpar}
        \inferrule*[right=\scriptsize$\vee$-I$_2$]
                {\inferrule*[right=\scriptsize$\vee$-I$_2$]
                    {\inferrule*[right=\scriptsize axiom]
                        {\phi \in \Gamma',\phi}
                        {\Gamma', \phi \vdash \phi}}
                    {\Gamma', \phi \vdash \phi \vee \psi}}
                {\Gamma', \phi \vdash (\phi \vee \psi) \vee \gamma}
    \end{mathpar}
    Now, let $\Gamma'' = \Gamma' \cup \{\psi \vee \gamma\}$, then $\mathcal{D}_2$ is constructed as follows:
    \begin{mathpar}
        \mprset{sep=1em}
        \inferrule*[right=\scriptsize$\vee$-E]
            {\inferrule*[right=\scriptsize axiom]
                {\psi \vee \gamma \in \Gamma''}
                {\Gamma'' \vdash \psi \vee \gamma} \\
                \inferrule*[right=\scriptsize$\vee$-I$_2$]
                    {\inferrule*[right=\scriptsize$\vee$-I$_1$]
                    {\inferrule*[right=\scriptsize axiom]
                        {\psi \in \Gamma'', \psi}
                        {\Gamma'',\psi \vdash \psi}}
                    {\Gamma'',\psi \vdash \phi \vee \psi}}
                    {\Gamma'',\psi \vdash (\phi \vee \psi) \vee \gamma}  \\
             \inferrule*[right=\scriptsize$\vee$-I$_1$]
                {\inferrule*[right=\scriptsize axiom]
                    {\gamma \in \Gamma'',\gamma}
                    {\Gamma'',\gamma \vdash \gamma}}
                {\Gamma'',\gamma \vdash (\phi \vee \psi) \vee \gamma}}
            {\Gamma''\vdash (\phi \vee \psi) \vee \gamma}
    \end{mathpar}

    The proof of $\Gamma, (\phi \vee \psi) \vee \gamma \vdash \phi \vee (\psi \vee \gamma)$ is identical when relabeling the formulas and using that disjunction is commutative as proven earlier. With these results we get the equivalence $\phi \vee (\psi \vee \gamma) \sim (\phi \vee \psi) \vee \gamma$.

\end{proof}

\begin{proof}[Agda proof] $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{disj-ass1}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{disj-ass2}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{ass-eq-disj}
\end{proof}


\subsubsection{Distributivity}\label{dist-section}

\begin{proposition}\label{conj-dist}
    Distribution over conjunction holds, that is the equivalence $\phi \wedge (\psi \vee \gamma) \sim (\phi \wedge \psi) \vee (\phi \wedge \gamma)$ holds.
\end{proposition}

\begin{proof}
    First we show that $\Gamma, \phi \wedge (\psi \vee \gamma) \vdash (\phi \wedge \psi) \vee (\phi \wedge \gamma)$. Let $\Gamma_1 = \Gamma \cup \{\phi \wedge (\psi \vee \gamma)\}$, then
    
    \begin{mathpar}
        \mprset{sep=1em}
        \inferrule*[right=\scriptsize $\vee$-E]
            {\inferrule*[right=\scriptsize $\wedge$-E$_2$]
                {\inferrule*[right=\scriptsize axiom]
                    {\phi \wedge (\psi \vee \gamma) \in \Gamma_1}
                    {\Gamma_1 \vdash \phi \wedge (\psi \vee \gamma)}}
                {\Gamma_1 \vdash \psi \vee \gamma} \\ 
            \mathcal{D}_1 \\ 
            \mathcal{D}_2}
            {\Gamma_1 \vdash (\phi \wedge \psi) \vee (\phi \wedge \gamma)}
    \end{mathpar}
    where $\mathcal{D}_1$ is a derivation concluding in $\Gamma_1,\psi \vdash (\phi \wedge \psi) \vee (\phi \wedge \gamma)$ and $\mathcal{D}_2$ a derivaton concluding in $\Gamma_1,\gamma \vdash (\phi \wedge \psi) \vee (\phi \wedge \gamma)$. We start by performing the derivation $\mathcal{D}_1$:
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-I$_2$]
            {\inferrule*[right=\scriptsize $\wedge$-I]
                {\inferrule*[right=\scriptsize weakening]
                    {\inferrule*[right=\scriptsize $\wedge$-E$_1$]
                        {\inferrule*[right=\scriptsize axiom]
                            {\phi \wedge (\psi \vee \gamma) \in \Gamma_1}
                            {\Gamma_1 \vdash \phi \wedge (\psi \vee \gamma)}}
                        {\Gamma_1 \vdash \phi}}
                    {\Gamma_1, \psi \vdash \phi} \\
                 \inferrule*[right=\scriptsize axiom]
                    {\psi \in \Gamma_1, \psi}
                    {\Gamma_1,\psi \vdash \psi}}
                {\Gamma_1,\psi \vdash \phi \wedge \psi}}
            {\Gamma_1,\psi \vdash (\phi \wedge \psi) \vee (\phi \wedge \gamma)}
    \end{mathpar}
    Then we derive $\mathcal{D}_2$:
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-I$_1$]
                {\inferrule*[right=\scriptsize $\wedge$-I]
                    {\inferrule*[right=\scriptsize weakening]
                        {\inferrule*[right=\scriptsize $\wedge$-E$_1$]
                            {\inferrule*[right=\scriptsize axiom]
                                {\phi \wedge (\psi \vee \gamma)\in\Gamma_1}
                                {\Gamma_1 \vdash \phi \wedge (\psi \vee \gamma)}}
                            {\Gamma_1 \vdash \phi}}
                        {\Gamma_1,\gamma \vdash \phi} \\
                     \inferrule*[right=\scriptsize axiom]
                        {\gamma \in \Gamma_1,\gamma}
                        {\Gamma_1,\gamma \vdash \gamma}}
                    {\Gamma_1,\gamma \vdash \phi \wedge \gamma}}
                {\Gamma_1,\gamma \vdash (\phi \wedge \psi) \vee (\phi \wedge \gamma)}
    \end{mathpar}

    This proves the first part of the equivalence. Now let $\Gamma_2 = \Gamma \cup \{(\phi \wedge \psi) \vee (\phi \wedge \gamma)\}$, then we want to show $\Gamma_2 \vdash \phi \wedge (\psi \vee \gamma)$. This means that if we can find derivations $\mathcal{D}_1'$ concluding in $\Gamma_2 \vdash \phi$ and $\mathcal{D}_2'$ concluding in $\Gamma_2 \vdash (\psi \vee \gamma)$ we can apply conjunction introduction to get the desired result.

    We will start with the derivation tree $\mathcal{D}_1'$:

    \begin{mathpar}
        \inferrule*[right=\scriptsize $\wedge$-E$_1$, lab=$\mathcal{D}_1''$]
                {\inferrule*[right=\scriptsize axiom]
                    {\phi \wedge \psi \in \Gamma_2, \phi \wedge \psi}
                    {\Gamma_2, \phi \wedge \psi \vdash \phi \wedge \psi}}
                {\Gamma_2,\phi \wedge \psi \vdash \phi}
                \quad
        \inferrule*[right=\scriptsize $\wedge$-E$_1$, lab=$\mathcal{D}_1'''$]
            {\inferrule*[right=\scriptsize axiom]
                {\phi \wedge \gamma \in \Gamma_2, \phi \wedge \gamma}
                {\Gamma_2, \phi \wedge \gamma \vdash \phi \wedge \gamma}}
            {\Gamma_2,\phi \wedge \gamma \vdash \phi}
    \end{mathpar}

    \begin{mathpar}
        \inferrule*[right= \scriptsize $\vee$-E, lab=$\mathcal{D}_1'$]
            {\inferrule*[right=\scriptsize axiom]
            {(\phi \wedge \psi) \vee (\phi \wedge \gamma)\in \Gamma_2}
            {\Gamma_2 \vdash (\phi \wedge \psi) \vee (\phi \wedge \gamma)} \\
            \mathcal{D}_1'' \\
            \mathcal{D}_1'''}
            {\Gamma_2 \vdash \phi}
    \end{mathpar}

Next we construct the derivation tree $\mathcal{D}_2'$ as follows:
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-I$_2$, lab=$\mathcal{D}_2''$]
            {\inferrule*[right=\scriptsize $\wedge$-E$_2$]
                {\inferrule*[right=\scriptsize axiom]
                    {\phi \wedge \psi \in \Gamma_2, \phi \wedge \psi}
                    {\Gamma_2, \phi \wedge \psi \vdash \phi \wedge \psi}}
                {\Gamma_2,\phi \wedge \psi \vdash \psi}}
            {\Gamma_2,\phi \wedge \psi \vdash \psi \vee \gamma}
        \quad
    \inferrule*[right=\scriptsize $\vee$-I$_1$, lab=$\mathcal{D}_2'''$]
        {\inferrule*[right=\scriptsize $\wedge$-E$_2$]
            {\inferrule*[right=\scriptsize axiom]
                {\phi \wedge \gamma \in \Gamma_2, \phi \wedge \gamma}
                {\Gamma_2, \phi \wedge \gamma \vdash \phi \wedge \gamma}}
            {\Gamma_2,\phi \wedge \gamma \vdash \gamma}}
        {\Gamma_2,\phi \wedge \gamma \vdash \psi \vee \gamma}
    \end{mathpar}
    
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-E, lab=$\mathcal{D}_2'$]
            {\inferrule*[right=\scriptsize axiom]
                {(\phi \wedge \psi) \vee (\phi \wedge \gamma)\in \Gamma_2}
                {\Gamma_2 \vdash (\phi \wedge \psi) \vee (\phi \wedge \gamma)} \\
                \mathcal{D}_2'' \\
                \mathcal{D}_2'''}
            {\Gamma_2 \vdash \psi \vee \gamma}
    \end{mathpar}

Lastly we put them together with conjunction introduction to get the desired result.
\begin{mathpar}
    \inferrule*[right=\scriptsize $\wedge$-I]
        {\mathcal{D}_1' \\ \mathcal{D}_2'}
        {\Gamma_2 \vdash \phi \wedge (\psi \vee \gamma)}
\end{mathpar}
This concludes the proof that $\phi \wedge (\psi \vee \gamma) \sim (\phi \wedge \psi) \vee (\phi \wedge \gamma)$.
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{conj-dist1}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{conj-dist2}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{dist-eq-conj}
\end{proof}

\begin{proposition}\label{disj-dist}
    Distribution over disjunction holds, that is the equivalence $\phi \vee (\psi \wedge \gamma) \sim (\phi \vee \psi) \wedge (\phi \vee \gamma)$ holds.
\end{proposition}

\begin{proof}
    We aim to show $\Gamma, \phi \vee (\psi \wedge \gamma) \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)$ and $\Gamma, (\phi \vee \psi) \wedge (\phi \vee \gamma) \vdash \phi \vee (\psi \wedge \gamma)$. 
    
    Let $\Gamma_1 = \Gamma \cup \{\phi \vee (\psi \wedge \gamma)\}$. We want to use disjunction elimination here, so we want to find derivations $\mathcal{D}_1$ and $\mathcal{D}_2$, such that

    \begin{mathpar}
        \inferrule*[right=\scriptsize$\vee$-E]
            {\inferrule*[right=\scriptsize axiom]
                {\phi \vee (\psi \wedge \gamma) \in \Gamma_1}
                {\Gamma_1 \vdash \phi \vee (\psi \wedge \gamma)} \\
             \mathcal{D}_1 \\
             \mathcal{D}_2}
            {\Gamma_1 \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)}
    \end{mathpar}
    This means $\mathcal{D}_1$ should conclude with $\Gamma_1,\phi \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)$. We construct $\mathcal{D}_1$ as follows:
    \begin{mathpar}
        \inferrule*[right=\scriptsize$\wedge$-I]
            {\inferrule*[right=\scriptsize $\vee$-I$_2$]
                {\inferrule*[right=\scriptsize axiom]
                    {\phi \in \Gamma_1,\phi}
                    {\Gamma_1,\phi \vdash \phi}}
                {\Gamma_1,\phi \vdash \phi \vee \psi} \\
             \inferrule*[right=\scriptsize $\vee$-I$_2$]
                {\inferrule*[right=\scriptsize axiom]
                    {\phi \in \Gamma_1,\phi}
                    {\Gamma_1, \phi \vdash \phi}}
                {\Gamma_1,\phi \vdash (\phi \vee \gamma)}}
            {\Gamma_1,\phi \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)}
    \end{mathpar}
    Then we need to construct $\mathcal{D}_2$, concluding in $\Gamma_1,\psi \wedge \gamma \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)$. This can be done as follows:
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\wedge$-I]
            {\inferrule*[right=\scriptsize $\vee$-I$_1$]
                {\inferrule*[right=\scriptsize $\wedge$-E$_1$]
                    {\inferrule*[right=\scriptsize axiom]
                        {\psi \wedge \gamma \in \Gamma_1,\psi \wedge \gamma}
                        {\Gamma_1,\psi \wedge \gamma \vdash \psi \wedge \gamma}}
                    {\Gamma_1,\psi \wedge \gamma \vdash \psi}}
                {\Gamma_1,\psi \wedge \gamma \vdash (\phi \vee \psi)} \\
             \inferrule*[right=\scriptsize $\vee$-I$_1$]
                {\inferrule*[right=\scriptsize $\wedge$-E$_2$]
                    {\inferrule*[right=\scriptsize axiom]
                        {\psi \wedge \gamma \in \Gamma_1,\psi \wedge \gamma}
                        {\Gamma_1,\psi \wedge \gamma \vdash \psi \wedge \gamma}}
                    {\Gamma_1,\psi \wedge \gamma \vdash \gamma}}
                {\Gamma_1,\psi \wedge \gamma \vdash (\phi \vee \gamma)}}
            {\Gamma_1,\psi \wedge \gamma \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)}
    \end{mathpar}
    This proves $\Gamma, \phi \vee (\psi \wedge \gamma) \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)$. To prove the second part we let $\Gamma_2 = \Gamma \cup \{(\phi \vee \psi) \wedge (\phi \vee \gamma)\}$, and then we find $\mathcal{D}_1'$ and $\mathcal{D}_2'$ such that

    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-E]
            {\inferrule*[right=\scriptsize $\wedge$-E$_1$]
                {\inferrule*[right=\scriptsize axiom]
                    {(\phi \vee \psi) \wedge (\phi \vee \gamma) \in \Gamma_2 }
                    {\Gamma_2 \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)}}
                {\Gamma_2 \vdash \phi \vee \psi} \\
             \mathcal{D}_1' \\
             \mathcal{D}_2'}
            {\Gamma_2 \vdash \phi \vee (\psi \wedge \gamma)}
    \end{mathpar}
    The derivation $\mathcal{D}_1'$ should conclude in $\Gamma_2, \phi \vdash \phi\vee (\psi \wedge \gamma)$. This is done as follows:
    \begin{mathpar}
        \inferrule*[right= \scriptsize $\vee$-I$_2$]
            {\inferrule*[right= \scriptsize axiom]
                {\phi \in \Gamma_2, \phi}
                {\Gamma_2, \phi \vdash \phi}}
            {\Gamma_2, \phi \vdash \phi\vee (\psi \wedge \gamma)}
    \end{mathpar}
    To derive $\mathcal{D}_2'$, concluding in $\Gamma_2,\psi \vdash \phi \vee (\psi \wedge \gamma)$, we need to use disjunction eliminaiton again. In order to do that we need to find derivations $\mathcal{D}_2''$, concluding in $\Gamma_2,\psi,\phi \vdash \phi \vee (\psi \wedge \gamma)$, and $\mathcal{D}_2'''$, concluding in $\Gamma_2,\psi,\gamma \vdash \phi \vee (\psi \wedge \gamma)$, such that this derivation $\mathcal{D}_2'$ holds.
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-E]
            {\inferrule*[right=\scriptsize $\wedge$-E$_2$]
                {\inferrule*[right=\scriptsize weakening]
                    {\inferrule*[right=\scriptsize axiom]
                        {(\phi \vee \psi) \wedge (\phi \vee \gamma)\in \Gamma_2}
                        {\Gamma_2 \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)}}
                    {\Gamma_2,\psi \vdash (\phi \vee \psi) \wedge (\phi \vee \gamma)}}
                {\Gamma_2,\psi \vdash \phi \vee \gamma} \\
             \mathcal{D}_2'' \\
             \mathcal{D}_2'''}
            {\Gamma_2,\psi \vdash \phi \vee (\psi \wedge \gamma)}
    \end{mathpar}
    We can derive $\mathcal{D}_2''$ as follows:
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-I$_2$]
                {\inferrule*[right=\scriptsize axiom]
                    {\phi \in \Gamma',\psi,\phi}    
                    {\Gamma',\psi,\phi \vdash \phi}}
                {\Gamma',\psi,\phi\vdash \phi \vee (\psi \wedge \gamma)}
    \end{mathpar}
    And derivation $\mathcal{D}_2'''$ is done in the following way:
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-I$_1$]
            {\inferrule*[right=\scriptsize $\wedge$-I]
                {\inferrule*[right=\scriptsize weakening]
                    {\inferrule*[right=\scriptsize axiom]
                        {\psi \in \Gamma',\psi}
                        {\Gamma',\psi \vdash \psi}}
                    {\Gamma',\psi,\gamma \vdash \psi}
                     \\
                \inferrule*[right=\scriptsize axiom]
                    {\gamma \in \Gamma',\psi,\gamma}
                    {\Gamma',\psi,\gamma \vdash \gamma}}
                {\Gamma',\psi,\gamma \vdash \psi \wedge \gamma}}
            {\Gamma',\psi,\gamma \vdash \phi \vee (\psi \wedge \gamma)}
    \end{mathpar}
    Thus we have also shown that $\Gamma, (\phi \vee \psi) \wedge (\phi \vee \gamma) \vdash \phi \vee (\psi \wedge \gamma)$. So the equivalence $\phi \vee (\psi \wedge \gamma) \sim (\phi \vee \psi) \wedge (\phi \vee \gamma)$ holds.
\end{proof}


\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{disj-dist1}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{disj-dist2}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{dist-eq-disj}
\end{proof}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Lindenbaum Tarski algebra    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Lindenbaum-Tarski algebra in Cubical Agda}
\subsection{Definition}

\begin{definition}[Lindenbaum-Tarski algebra]
    The Lindenbaum-Tarski algebra is the quotient algebra obtained by factoring the algebra of formulas by the equivalence relation $\sim$.
\end{definition}
We use the definiton of a set quotient already existing in the \agdaCubical library to define the Lindenbaum-Tarski algebra.

\begin{agdadef}[Lindenbaum-Tarski algebra]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LT}
\end{agdadef}



\subsection{Binary operations and propositional constants}

To define operations on the Lindenbaum-Tarski algebra, we utilize the already existing functions \texttt{setQuotBinOp} and \texttt{setQuotUnaryOp} from the \agdaCubical library, which operate on set quotients. Our first step is to define conjunction in the Lindenbaum-Tarski algebra, using \texttt{setQuotBinOp} to create a binary operation. In order to do this, we must provide proof that the underlying operation - conjunction on formulas in the propositional calculus - respects the equivalence relation $\sim$. We will establish this as a lemma.

\begin{lemma}
    For all formulas $a,a',b,b'$, if $a\sim a'$ and $b \sim b'$, then $a\wedge b \sim a' \wedge b'$.
\end{lemma}

\begin{proof} By definition of the relation $\sim$ we have:
    \begin{enumerate}[label=(\roman*)]
        \item $\Gamma, a \vdash a'$
        \item $\Gamma, a' \vdash a$
        \item $\Gamma, b \vdash b'$
        \item $\Gamma, b' \vdash b$
    \end{enumerate}
    We want to show that then $\Gamma, a \wedge b \vdash a' \wedge b'$ and $\Gamma, a' \wedge b' \vdash a \wedge b$. First, we show that $\Gamma, a \wedge b \vdash a' \wedge b'$. By the axiom rule and conjunction elimination, we have:
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\wedge$-E$_1$]
            {\inferrule*[right=\scriptsize axiom]
                {a \wedge b \in \Gamma, a \wedge b }
                {\Gamma, a \wedge b \vdash a \wedge b}}
            {\Gamma, a \wedge b \vdash a}
        \qquad
        \inferrule*[right=\scriptsize $\wedge$-E$_2$]
            {\inferrule*[right=\scriptsize axiom]
                    {a \wedge b \in \Gamma, a \wedge b }
                    {\Gamma, a \wedge b \vdash a \wedge b}}
            {\Gamma, a \wedge b \vdash b}
    \end{mathpar}
    Now we can use Lemma \ref{trans-lemma} on $\Gamma, a\wedge b \vdash a$ and (i) to get $\Gamma, a \wedge b \vdash a'$, and similarly on $\Gamma, a \wedge b \vdash b$ and (iii) to get $\Gamma, a\wedge b \vdash b'$. Then, by conjunction introduction we get the desired result:
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\wedge$-I]
            {\Gamma, a \wedge b \vdash a' \\ \Gamma, a \wedge b \vdash b'}
            {\Gamma, a \wedge b \vdash a' \wedge b'}
    \end{mathpar}
    Proving $\Gamma, a' \wedge b' \vdash a \wedge b$ is identical to the first proof, so we omit it here.
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{eq-respects-conj}
\end{proof}

Now we are ready to define conjunction on Lindenbaum-Tarski algebra in \CubicalAgda.

\begin{agdadef}[Conjunction on Lindenbaum-Tarski algebra]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LT-conj}
\end{agdadef}


The \texttt{setQuotBinOp} function takes four arguments: two proofs of reflexivity, the logical conjunction operator $\wedge/$, and a proof that the operator respects the equivalence relation. In this case, the reflexivity proofs are identical since A and B are of the same type. The resulting function takes two elements A and B in the Lindenbaum-Tarski algebra and returns their conjunction.

When defining disjunction we need to prove a similar lemma as for the conjunction. We must provide proof that the disjunction operator respects the equivalence relation $\sim$.

\begin{lemma}
    For all formulas $a,a',b,b'$, if $a\sim a'$ and $b \sim b'$, then $a \vee b \sim a' \vee b'$.
\end{lemma}

\begin{proof} By defintion of the relation $\sim$, we have:
    \begin{enumerate}[label=(\roman*)]
        \item $\Gamma, a \vdash a'$
        \item $\Gamma, a' \vdash a$
        \item $\Gamma, b \vdash b'$
        \item $\Gamma, b' \vdash b$
    \end{enumerate}
    We want to show that then $\Gamma, a \vee b \vdash a' \vee b'$ and $\Gamma, a' \vee b' \vdash a \vee b$. By the axiom rule and disjunction introduction, we have:
    \begin{mathpar}
        \inferrule*[right=\scriptsize axiom]
            {a \vee b \in \Gamma, a \vee b}
            {\Gamma, a \vee b \vdash a \vee b}
    \end{mathpar}
    Using (i) we can deduce:
    \begin{mathpar}
        \inferrule*[right=\scriptsize exchange]
            {\inferrule*[right=\scriptsize weakening]
                {\inferrule*[right=\scriptsize $\vee$-I$_2$]
                    {\Gamma, a \vdash a'}
                    {\Gamma, a \vdash a' \vee b'}}
                {\Gamma, a, a\vee b \vdash a' \vee b'}}
            {\Gamma,a\vee b, a \vdash a' \vee b'}
    \end{mathpar}
    Similarly, using (iii) we can deduce:
    \begin{mathpar}
        \inferrule*[right=\scriptsize exchange]
            {\inferrule*[right=\scriptsize weakening]
                {\inferrule*[right=\scriptsize $\vee$-I$_2$]
                    {\Gamma, b \vdash b'}
                    {\Gamma, b \vdash a' \vee b'}}
                {\Gamma, b, a\vee b \vdash a' \vee b'}}
            {\Gamma,a\vee b, b \vdash a' \vee b'}
    \end{mathpar}
    Then by using disjunction elimination we get the desired result,
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-E]
            {\Gamma, a \vee b \vdash a \vee b \\
            \Gamma,a\vee b, a \vdash a' \vee b' \\
            \Gamma,a\vee b, b \vdash a' \vee b'}
            {\Gamma, a \vee b \vdash a' \vee b'}
    \end{mathpar}
    Proving $\Gamma, a' \vee b' \vdash a \vee b$ is identical to the first proof, so we omit it here.    
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{eq-respects-disj}
\end{proof}

Using \texttt{setQuotBinOp} we can now, with this lemma, define disjunction on Lindenbaum-Tarski algebra in \CubicalAgda.

\begin{agdadef}[Disjunction on Lindenbaum-Tarski algebra]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LT-disj}
\end{agdadef}

Next, in order to define negation on the Lindenbaum-Tarski algebra, we need to show that the underlying operation of negation in the propositional calculus respects the equivalence relation $\sim$. This can be achieved by proving another lemma. 

\begin{lemma}
    For all formulas $a,a'$, if $a\sim a'$, then $ \neg a \sim \neg a'$.
\end{lemma}

\begin{proof}
    From the definition of $\sim$ we are given $\Gamma, a \vdash a'$ and $\Gamma, a' \vdash a$. We aim to show that $\Gamma, \neg a \vdash \neg a'$ and $\Gamma, \neg a' \vdash \neg a$. The two proofs are identical so we will only prove $\Gamma, \neg a \vdash \neg a'$ here. This is done through natural deduction,

    \begin{mathpar}
        \inferrule*[right=\scriptsize $\neg$-I]
            {\inferrule*[right=\scriptsize $\neg$-E]
                {\inferrule*[right=\scriptsize exchange]
                    {\inferrule*[right= \scriptsize weakening]
                        {\Gamma, a' \vdash a}
                        {\Gamma, a', \neg a\vdash a}}
                    {\Gamma, \neg a, a' \vdash a} \\
                \inferrule*[right=\scriptsize weakening]
                    {\inferrule*[right=\scriptsize axiom]
                        {\neg a \in \Gamma, \neg a}
                        {\Gamma, \neg a \vdash \neg a}}
                    {\Gamma,\neg a , a' \vdash \neg a}}
                {\Gamma, \neg a, a' \vdash \bot}}
            {\Gamma,\neg a \vdash \neg a'}
    \end{mathpar}
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{eq-respects-neg}
\end{proof}

This lemma shows that the negation operation on the propositional calculus respects the equivalence relation $\sim$, and allows us to define negation on the Lindenbaum-Tarski algebra in \CubicalAgda.

\begin{agdadef}[Negation on Lindenbaum-Tarski algebra]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LT-neg}
\end{agdadef}


The \texttt{setQuotUnaryOp} function takes two arguments: a unary operator ($\neg/$) and a proof that the operator respects the equivalence relation ($\sim$-respects-$\neg$). The resulting function takes one element A in the Lindenbaum-Tarski algebra and returns its negation.

To construct the equivalence classes for propositional constants, we can use the constructor from the definition of a set quotient in the already existing definition of set quotients in \CubicalAgda.

\begin{agdadef}[Logical constants in Lindenbaum-Tarski algebra]$ $
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LT-top}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LT-bot}
\end{agdadef}


\subsection{Proof that the Lindenbaum-Tarski algebra is Boolean}

To prove that the Lindenbaum-Tarski algebra is boolean we can show that it is a complemented distributive lattice. To do this there first needs to be a partial order defined on the set of equivalence classes.
\begin{definition}\label{order-relation}
    Let $\mathcal{L}$ be the propositional language described previously and let $S$ be the set of all sentences of $\mathcal{L}$. For each $x\in S$, let $[x]$ denote the equivalence class of $x$ under the equivalence relation $\sim$, and let $LT$ be the set of all such equivalence classes. Define the relation $\leq$ on $LT$ by
    \begin{align*}
        [x] \leq [y] \quad \text{iff} \quad \Gamma, x \vdash y
    \end{align*}
    and define join, meet and complementation as follows:
    \begin{align*}
        [x] \vee [y] \equiv [x\vee y], \quad [x] \wedge [y] \equiv [x \wedge y], \quad \neg[x] \equiv [\neg x].
    \end{align*}
\end{definition}
Note that the operators on the left hand side are operating on the equivalence classes, and the operators on the right hand side are operating on formulas in the underlying propositional calculus.

\begin{proposition}
    The relation $\leq$ is a partial order on $LT$.
\end{proposition}

\begin{proof}
    First, we must show that the relation is well defined on $LT$. If $x_2 \in [x_1]$ and $y_2\in [y_1]$, then 
    \begin{align*}
        [x_1] \leq [y_1] \quad \text{implies} \quad [x_2] \leq [y_2],
    \end{align*}
    or equivalently, using the definition above,
    \begin{align*}
        \Gamma, x_1 \vdash y_1 \quad \text{implies} \quad \Gamma, x_2 \vdash y_2
    \end{align*}
    where $\Gamma$ a context. Given $x_2 \in [x_1]$, we have that $x_1 \sim x_2$ which means that $\Gamma, x_1 \vdash x_2$ and $\Gamma, x_2 \vdash x_1$. Similarly, since $y_1 \sim y_2$, we have that $\Gamma, y_1 \vdash y_2$ and $\Gamma, y_2 \vdash y_1$. By applying Lemma \ref{trans-lemma} to $\Gamma, x_2 \vdash x_1$ and the assumption $\Gamma, x_1 \vdash y_1$, we get $\Gamma, x_2 \vdash y_1$. Applying the lemma again to the previous result together with $\Gamma, y_1 \vdash y_2$ yields $\Gamma, x_2 \vdash y_2$, showing that the relation is well defined. The operations join, meet and complementation have been shown to be well defined in the previous section when we defined the operations on the Lindenbaum-Tarski algebra.

    Now, we need to show that $\leq$ is an order relation. Reflexivity follows immediately from the axiom rule. For antisymmetry, suppose $x \leq y$ and $y \leq x$, then we have that $\Gamma, x \vdash y$ and $\Gamma, y \vdash x$, so by definition of the equivalence relation we have $x \sim y$. This means that $[x] \equiv [y]$, hence $\leq$ is antisymmetric. Finally for transitivity assume that $x \leq y$ and $y \leq z$, then we have $\Gamma, x \vdash y$ and $\Gamma, y \vdash z$. Here we can apply Lemma \ref{trans-lemma} and get $\Gamma, x \vdash z$, that is $x \leq z$. Hence we can conclude that $\langle LT, \leq \rangle$ is a partially ordered set.
\end{proof}


\begin{definition}[Lattice]\label{lattice}
    A lattice is a non-empty partially ordered set $\langle L, \leq \rangle$ where every $x,y \in L$ has a supremum $x\vee y$, also called join, and an infimum $x \wedge y$, also called meet. It follows from this definition that
    $$x \leq y \quad \text{iff} \quad x \vee y = y \quad \text{iff} \quad x \wedge y = x.$$
\end{definition}

\begin{definition}
    A lattice $L$ is distributive if for all $x,y,z \in L$,
    \begin{align*}
        x \wedge (y \vee z) = (x \wedge y) \vee (x \wedge z), \\
        x \vee (y \wedge z) = (x \vee y) \wedge (x \vee z).
    \end{align*}
\end{definition}

\begin{definition}
    A lattice $L$ is complemented if there exist both least and greatest elements in $L$, denoted $\bot$ and $\top$, and for every $x\in L$ there exists $y\in L$ such that
    $$x \vee y = \top \quad \text{and} \quad x\wedge y = \bot.$$
\end{definition}

\begin{definition}
    A boolean algebra is a complemented distributive lattice.
\end{definition}

\begin{theorem}
    The Lindenbaum-Tarski algebra is a boolean algebra.
\end{theorem}

\begin{proof}
    First we must show that the $\langle LT, \leq \rangle$ is a lattice. To do whis we must show that any two elements $[x],[y]\in LT$ has both a supremum and infimum, $[x] \vee [y]$ and $[x] \wedge[y]$ respectively. 
    
    To show that $[x] \vee [y]$ is an upper bound for $\{[x],[y]\}$ we need to show both that $[x] \leq [x \vee y]$ and that $[y] \leq [x \vee y]$. From reflexivity we have $[x] \leq [x]$, or $\Gamma, x \vdash x$. Using disjunction introduction we get $\Gamma, x \vdash x \vee y$, hence $[x] \leq [x \vee y]$ which is equivalent to $[x] \leq [x] \vee [y]$. With an identical argument we also get that $[y] \leq [x]\vee [y]$. To show that this is the least upper bound, assume that $[z]$ is any other upper bound for $\{[x],[y]\}$, then $[x] \leq [z]$ and $[y] \leq [z]$. This means that we have $\Gamma, x \vdash z$ and $\Gamma, y \vdash z$. From the axiom rule and disjunction elimination rule we can deduce
    \begin{mathpar}
        \inferrule*[right = \scriptsize exchange, lab=$\mathcal{D}_1$]
                {\inferrule*[right= \scriptsize weakening]
                    {\Gamma, x \vdash z}
                    {\Gamma, x, x \vee y \vdash z}}
                {\Gamma, x \vee y, x \vdash z}
        \quad
        \inferrule*[right = \scriptsize exchange, lab=$\mathcal{D}_2$]
        {\inferrule*[right= \scriptsize weakening]
            {\Gamma, y \vdash z}
            {\Gamma, y, x \vee y \vdash z}}
        {\Gamma, x \vee y, y \vdash z}
    \end{mathpar}
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\vee$-E]
            {\inferrule*[right=axiom]
                { }
                {\Gamma, x \vee y \vdash x \vee y} \\
            \mathcal{D}_1 \\
            \mathcal{D}_2}
            {\Gamma, x \vee y \vdash z}
    \end{mathpar}
    
    Then $[x\vee y] \equiv [x] \vee [y] \leq [z]$. Hence $[x] \vee [y]$ is the least upper bound, i.e. the supremum.
    
    Showing that $[x] \wedge [y]$ is the infimum is similar. It should be clear that from conjunction elimination we have both $\Gamma, x \wedge y \vdash x$ and $\Gamma, x \wedge y \vdash y$, so $[x \wedge y] \equiv [x] \wedge [y] \leq x$ and $[x \wedge y] \equiv [x] \wedge [y] \leq y$. Now assume that $[z]$ is any other lower bound for $\{[x],[y]\}$, then $[z] \leq [x]$ and $[z] \leq [y]$. This means that $\Gamma, z \vdash x$ and $\Gamma, z \vdash y$, and we can conclude that $\Gamma, z \vdash x\wedge y$, hence $[z] \leq [x\wedge y] \equiv [x] \wedge [y]$. 

    We have now shown that $\langle LT, \leq \rangle$ is a lattice. Distributivity follows from the distributive properties of propositional calculus, shown in Section \ref{dist-section}. Having shown that $\langle LT, \leq \rangle$ is a distributive lattice, all that is left is to show that it is also complemented. In Definition \ref{order-relation} we defined complementation of an element $[x]$ to be $\neg [x] = [\neg x]$. This complement is unique\cite{Tay:2012}, therefore we need to show that 
    \begin{align*}
        [x]\vee \neg [x] \equiv [\top] \quad \text{and} \quad [x] \wedge \neg [x] \equiv [\bot].
    \end{align*}
    Since we have that
    $$[x]\vee \neg [x] \equiv [x]\vee [\neg x] \equiv [x\vee \neg x]$$
    it suffices to show that $\Gamma, x\vee \neg x \vdash \top$ and $\Gamma, \top \vdash x\vee \neg x$. This is simply done with $\top$-I and LEM respectively. To show $[x] \wedge \neg [x] \equiv [\bot]$ we first we need to show $\Gamma, x \wedge \neg x \vdash \bot$, this is done by conjunction elimination and negation elimination,
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\neg$-E]
            {\inferrule*[right= \scriptsize $\wedge$-E$_1$]
                {\inferrule*[right=\scriptsize axiom]
                    { }
                    {\Gamma,x \wedge \neg x \vdash x \wedge \neg x}}
                {\Gamma,x \wedge \neg x \vdash x} \\
            \inferrule*[right= \scriptsize $\wedge$-E$_2$]
                {\inferrule*[right=\scriptsize axiom]
                { }
                {\Gamma,x \wedge \neg x \vdash x \wedge \neg x}}
                {\Gamma,x \wedge \neg x \vdash \neg x}}
            {\Gamma,x \wedge \neg x \vdash \bot}
    \end{mathpar}
    The other direction, i.e $\Gamma, \bot \vdash x \wedge \neg x$, is just applying $\bot$-E. This shows that $\langle LT, \leq \rangle$ is a complemented distributive lattice, and thus a boolean algebra.
\end{proof}

\begin{proof}[Agda proof]
    We make use of the fact that there is already a function for constructing a distributive lattice in the \agdaCubical library. We need only provide all the proofs needed for the arguments.
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LT-DistLattice}
    Lastly we also need to provide the proof that the lattice is complemented.
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{LT-complemented}
\end{proof}


\subsection{Soundness}
Soundness is a fundamental property of logical systems that ensures that the conclusions drawn from the system are reliable and trustworthy. In particular, soundness guarantees that if a proposition can be derived using the inference rules of the logical system from a set of true premises, then that proposition is true.

\begin{theorem}
    The Lindenbaum-Tarski algebra is sound.
\end{theorem}

\begin{proof}
    To prove that the Lindenbaum-Tarski algebra is sound, we need to show that any formula that is provable also belongs to the same equivalence class as $\top$. In other words, we need to show that if $\Gamma \vdash \phi$ then $[\phi] \equiv [\top]$. By definiton of the Lindenbaum-Tarski algebra this is equivalent to showing $\Gamma, \phi \vdash \top$ and $\Gamma, \top \vdash \phi$. This can be done using $\top$-I and weakening respectively.
    \begin{mathpar}
        \inferrule*[right=\scriptsize $\top$-I]
            { }
            {\Gamma, \phi \vdash \top}
        \qquad
        \inferrule*[right= \scriptsize weakening]
            {\Gamma \vdash \phi}
            {\Gamma, \top \vdash \phi}
    \end{mathpar}
\end{proof}

\begin{proof}[Agda proof]
    $\:$
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{sound}
\end{proof}



\section{Conclusions}
We successfully formalized the Lindenbaum-Tarski algebra in \CubicalAgda

\subsection{Possible improvements}

We defined the notion of a context as a set of formulas and implemented it as a list in \Agda. To improve the implementation of the structural rule exchange, it is worth exploring the possibility of exchanging any two elements in the context, rather than just the last two.

Additionally, we could consider modifying the deduction rules for the propositional calculus, such as adding implication, to see if this reduces the dependency on the structural rules.


\subsection{Future work}
We have formalized the Lindenbaum-Tarski algebra over a propositional language, the next step would be to define it over a first order language. The equivalence relation $\sim$ and the binary relations together with negation is defined as previously, but we would need to account for the quantifiers.












% References
\newpage
\bibliography{refs}

% Appendices
\newpage
\begin{appendices}
    \section{LindenbaumTarski.agda}\label{code}
    \ExecuteMetaData[agda/latex/LindenbaumTarski.tex]{src}
\end{appendices}

\end{document}